---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Creacion de 
      - VPC
      - 2 subredes publicas y 2 subredes privadas
      - Internet gateway IGW
      - EgressOnlyInternetGateway EIGW
      - tabla de rutas con IPv4 e IPv6 y sus asociaciones a las subredes
      - una instancia EC2 Ubuntu Server 24.04 con puertos abiertos. IPv6 e IPv4 elastica
      - una instancia EC2 Windows Server 2022 con puertos abiertos. IPv6 e IPv4 elastica
  
  Utilizado CloudFormation para AWS Academy Learning Lab
  Autor: Javier Teran Gonzalez
  Fecha creacion:     04/12/2024
  
  Version: 1.20
  Modificaciones: 16/04/2024. Cambiar AMIs de Ubuntu y Windows
                  16/04/2024. Crear las instancias tambien con IPv6
                  11/10/2024. Crear dos subredes privadas con sus rutas. 
                  27/01/2025. Completa reglas grupos de seguridad. Cambio espacio disco ubuntu 
                  27/02/2025. Outputs con URL de las instancias
Parameters:
    NombreProyecto:
        Description: 'Nombre del proyecto'
        Type: String
        Default: 'lab25'         
    NN:
        Type: Number
        Description: Numero de alumno
        Default: 15
        ConstraintDescription: 'Debe estar en el rango del [1-50]'
        MinValue: 1
        MaxValue: 50
    AMIUbuntu:
        Description: 'AMI ID Ubuntu Server 24.04'
        Type: String
        Default: 'ami-04b4f1a9cf54c11d0'    
    AMIWindows:
        Description: 'AMI ID Windows Server 2022'
        Type: String
        Default: 'ami-0a0ebee827a585d06' 
Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: 10.25.0.0/16
            EnableDnsHostnames: true
            EnableDnsSupport: true
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-vpc'
    IPv6CidrBlock:
        Type: AWS::EC2::VPCCidrBlock
        Properties:
            VpcId: !Ref VPC
            AmazonProvidedIpv6CidrBlock: true

    # SubRedes publicas
    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: !Sub '10.25.1${NN}.0/25'
            Ipv6CidrBlock:  !Select [0, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
            AssignIpv6AddressOnCreation: true
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-PublicSubnet1'
    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: !Sub '10.25.1${NN}.128/25'
            Ipv6CidrBlock:  !Select [1, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
            AssignIpv6AddressOnCreation: true
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-PublicSubnet2'

    # SubRedes privadas
    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: !Sub '10.25.2${NN}.0/25'
            Ipv6CidrBlock:  !Select [2, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
            AssignIpv6AddressOnCreation: true
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-PrivateSubnet1'
    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: !Sub '10.25.2${NN}.128/25'
            Ipv6CidrBlock:  !Select [3, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
            AssignIpv6AddressOnCreation: true
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-PrivateSubnet2'

    # Internet Gateway y EgressOnlyInternetGateway
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-igw'

    VPCGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: !Ref VPC
            InternetGatewayId: !Ref InternetGateway

    # Puerta de enlace de internet solo de salida para IPv6 EIgw    
    #EgressOnlyInternetGateway:
    #    Type: AWS::EC2::EgressOnlyInternetGateway
    #    Properties: 
    #      VpcId: !Ref VPC

    # Tabla de rutas publica
    TablaRutasPublica:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-rtb-public'

    # Tablas de rutas privadas
    TablaRutasPrivada1:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: "Name"
                  Value: !Sub '${NombreProyecto}${NN}-rtb-private1'
    TablaRutasPrivada2:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: "Name"
                  Value: !Sub '${NombreProyecto}${NN}-rtb-private2'

    # Rutas por defecto para la tabla de rutas publica. Tanto IPv4 como IPv6
    DefaultRouteIPv4:
        Type: AWS::EC2::Route
        DependsOn: VPCGatewayAttachment
        Properties:
            RouteTableId: !Ref TablaRutasPublica
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
    DefaultRouteIPv6:
        Type: AWS::EC2::Route
        DependsOn: VPCGatewayAttachment
        Properties:
            RouteTableId: !Ref TablaRutasPublica
            DestinationIpv6CidrBlock: ::/0
            GatewayId: !Ref InternetGateway
    

    # Asociacion de subredes publicas con tabla de rutas
    SubnetRouteTableAssociation1:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSubnet1
            RouteTableId: !Ref TablaRutasPublica
    SubnetRouteTableAssociation2:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSubnet2
            RouteTableId: !Ref TablaRutasPublica

    # Asociacion de subredes privadas con tabla de rutas
    SubnetRouteTableAssociation3:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PrivateSubnet1
            RouteTableId: !Ref TablaRutasPrivada1
    SubnetRouteTableAssociation4:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PrivateSubnet2
            RouteTableId: !Ref TablaRutasPrivada2

    # Grupo de seguridad Ubuntu. Puertos DNS, HTTP, HTTPS y SSH IPv4/IPv6
    UbuntuSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: !Sub '${NombreProyecto}${NN}-us-sg'
            GroupDescription: !Sub '${NombreProyecto}${NN}-us-sg'
            VpcId: !Ref VPC
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 53
                ToPort: 53
                CidrIp: 0.0.0.0/0
                Description: Permitir DNS(TCP) IPv4
              - IpProtocol: udp
                FromPort: 53
                ToPort: 53
                CidrIp: 0.0.0.0/0
                Description: Permitir DNS(UDP) IPv4
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
                Description: Permitir HTTP IPv4       
              - IpProtocol: tcp
                FromPort: 443
                ToPort: 443
                CidrIp: 0.0.0.0/0
                Description: Permitir HTTPS IPv4           
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 0.0.0.0/0
                Description: Permitir SSH IPv4
              - IpProtocol: tcp
                FromPort: 53
                ToPort: 53
                CidrIpv6: ::/0
                Description: Permitir DNS(TCP) IPv6
              - IpProtocol: udp
                FromPort: 53
                ToPort: 53
                CidrIpv6: ::/0
                Description: Permitir DNS(UDP) IPv6
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIpv6: ::/0
                Description: Permitir HTTP IPv6           
              - IpProtocol: tcp
                FromPort: 443
                ToPort: 443
                CidrIpv6: ::/0
                Description: Permitir HTTPS IPv6            
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIpv6: ::/0
                Description: Permitir SSH IPv6
#              - IpProtocol: '-1'
#                SourceSecurityGroupId: !Ref WindowsSecurityGroup
#                Description: Permitir trafico desde el grupo de seguridad de Windows
                # Esto no es muy seguro pero facilita la realizaci√≥n de las tareas. Incluido el ICMP e ICMPv6
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-us-sg'
    
    # Creacion de instancia Ubuntu
    UbuntuInstance:
        Type: AWS::EC2::Instance
        Properties:
          ImageId: !Ref AMIUbuntu
          InstanceType: t2.micro
          KeyName: vockey
          Monitoring: false
          SecurityGroupIds:
              - !Ref UbuntuSecurityGroup
          SubnetId: !Ref PublicSubnet1
          PrivateIpAddress: !Sub '10.25.1${NN}.100'
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              echo 'User data para Ubuntu Server'
              apt-get update -y
              apt-get upgrade -y
              apt-get install bind9 -y
              apt install apache2  -y
              apt install php php-mysql -y
          Tags:
            - Key: Name
              Value: !Sub '${NombreProyecto}${NN}-us'
          BlockDeviceMappings:
            - DeviceName: /dev/sda1  # El volumen ra√≠z de la instancia
              Ebs:
                VolumeSize: 20  # Tama√±o del volumen en GB
                VolumeType: gp3  # Tipo de volumen
                DeleteOnTermination: true  # El volumen se eliminar√° cuando la instancia termine
    UbuntuElasticIp:
        Type: AWS::EC2::EIP
        Properties:
            InstanceId: !Ref UbuntuInstance
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-us-ip'

    # Grupo de seguridad windows para RDP, DNS y HTTP IPv4/IPv6
    WindowsSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: !Sub '${NombreProyecto}${NN}-ws-sg'
            GroupDescription: !Sub '${NombreProyecto}${NN}-ws-sg'
            VpcId: !Ref VPC
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 3389
                ToPort: 3389
                CidrIp: 0.0.0.0/0
                Description: Permitir RDP IPv4
              - IpProtocol: tcp
                FromPort: 53
                ToPort: 53
                CidrIp: 0.0.0.0/0
                Description: Permitir DNS(TCP) IPv4
              - IpProtocol: udp
                FromPort: 53
                ToPort: 53
                CidrIp: 0.0.0.0/0
                Description: Permitir DNS(UDP) IPv4
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
                Description: Permitir HTTP IPv4
              - IpProtocol: tcp
                FromPort: 3389
                ToPort: 3389
                CidrIpv6: ::/0
                Description: Permitir RDP IPv6
              - IpProtocol: tcp
                FromPort: 53
                ToPort: 53
                CidrIpv6: ::/0
                Description: Permitir DNS(TCP) IPv6
              - IpProtocol: udp
                FromPort: 53
                ToPort: 53
                CidrIpv6: ::/0
                Description: Permitir DNS(UDP) IPv6
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIpv6: ::/0
                Description: Permitir HTTP IPv6
              - IpProtocol: '-1'
                SourceSecurityGroupId: !Ref UbuntuSecurityGroup
                Description: Permitir trafico desde el grupo de seguridad de Ubuntu
                # Esto no es muy seguro pero facilita la realizaci√≥n de las tareas. Incluido el ICMP e ICMPv6                
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-ws-sg'
    # Creacion de instancia Windows
    WindowsInstance:
        Type: AWS::EC2::Instance
        Properties:
            ImageId: !Ref AMIWindows
            InstanceType: t2.medium
            KeyName: vockey
            Monitoring: false
            SecurityGroupIds:
                - !Ref WindowsSecurityGroup
            SubnetId: !Ref PublicSubnet2
            PrivateIpAddress: !Sub '10.25.1${NN}.200'
            UserData: # Instala IIS
              Fn::Base64: !Sub |
                <powershell>
                Write-Host 'User data para Windows Server'
                # Instalar el rol DNS
                Install-WindowsFeature -Name DNS -IncludeManagementTools
                # Desactivar el firewall de windows . Cuidado! ;-)
                Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
                # Modificar las propiedades TCP/IP de la tarjeta de red para a√±adir los servidores DNS
                Get-DnsClient | Set-DnsClientServerAddress -ServerAddresses ("10.25.1${NN}.100","10.25.1${NN}.200")
                # Instalar Internet Information Services (IIS)
                #Install-WindowsFeature -Name Web-Server -IncludeManagementTools  # -IncludeAllSubFeature
                Install-WindowsFeature -name Web-Server -IncludeManagementTools  

                # Crear un archivo en la carpeta Temp
                New-Item -Path "C:\" -Name "Temp" -ItemType "directory"
                $file = "C:\Temp\" + (Get-Date).ToString("MM-dd-yy-hh-mm")
                New-Item $file -ItemType file
                
                # Descargar e instalar Wireshark
                $wiresharkInstaller = "https://1.na.dl.wireshark.org/win64/Wireshark-4.4.5-x64.exe"
                $wiresharkPath = "C:\Temp\WiresharkInstaller.exe"
                Invoke-WebRequest -Uri $wiresharkInstaller -OutFile $wiresharkPath
                Start-Process -FilePath $wiresharkPath -ArgumentList "/S" -Wait

                $npcapInstaller = "https://npcap.com/dist/npcap-1.81.exe"
                $npcapPath = "C:\Temp\npcap.exe"
                Invoke-WebRequest -Uri $npcapInstaller -OutFile $npcapPath
                Start-Process -FilePath $npcapPath -ArgumentList "/S" -Wait

                #El winget parece que no funciona si no se ha iniciado sesi√≥n previamente en el servidor
                # Instalar Visual Studio Code usando winget
                #winget install -e --id Microsoft.VisualStudioCode
                # Instalar AWS CLI usando winget
                #winget install -e --id Amazon.AWSCLI
                # Descargar e instalar Thunderbird
                #winget install -e --id Mozilla.Thunderbird

                </powershell>    
                <persist>true</persist>            
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-ws'
    WindowsElasticIp:
        Type: AWS::EC2::EIP
        Properties:
            InstanceId: !Ref WindowsInstance
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-ws-ip'
Outputs:
    IPv4Ubuntu:
        Description: IP publica Ubuntu
        Value: !GetAtt UbuntuInstance.PublicIp
    IPv4Windows:
        Description: IP publica Windows
        Value: !GetAtt WindowsInstance.PublicIp
    VPCId:
        Description: "VPC ID"
        Value: !Ref VPC
    httpUbuntu:
        Description: URL de la instancia Ubuntu
        Value: !Sub 'http://${UbuntuElasticIp}'
    httpWindows:
        Description: URL de la instancia Windows
        Value: !Sub 'http://${WindowsElasticIp}'
    sshUbuntu:
        Description: SSH a la instancia Ubuntu
        Value: !Sub 'ssh -i vockey.pem ubuntu@${UbuntuElasticIp}'
