---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Creacion de una VPC, 4 subredes publicas y privadas, internet gateway y tabla de rutas con IPv4 e IPv6
    Ademas creara :
      - una instancia EC2 Ubuntu Server 24.04
      - una instancia EC2 Windows Server 2022
        con IPs elasticas
  
  Utilizado CloudFormation para AWS Academy Learning Lab
  Autor: Javier Teran Gonzalez
  Fecha creacion:     04/04/2024
  
  Version: 1.10
  Modificaciones: 16/04/2024. Cambiar AMIs de Ubuntu y Windows
                  16/04/2024. Crear las instancias tambien con IPv6
                  11/10/2024. Crear dos subredes privadas con sus rutas. 
                              Crear variables export para utilizar en otra plantilla. Ej: RDS
Parameters:
    NombreProyecto:
        Description: 'Nombre del proyecto'
        Type: String
        Default: 'SRI24'         
    NN:
        Type: Number
        Description: Numero de alumno
        Default: 15
        ConstraintDescription: 'Debe estar en el rango del [1-50]'
        MinValue: 1
        MaxValue: 50
    AMIUbuntu:
        Description: 'AMI ID Ubuntu Server 24.04'
        Type: String
        Default: 'ami-04b4f1a9cf54c11d0'    
    AMIWindows:
        Description: 'AMI ID Windows Server 2022'
        Type: String
        Default: 'ami-0a0ebee827a585d06' 
Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: 10.24.0.0/16
            EnableDnsHostnames: true
            EnableDnsSupport: true
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-vpc'
    IPv6CidrBlock:
        Type: AWS::EC2::VPCCidrBlock
        Properties:
            VpcId: !Ref VPC
            AmazonProvidedIpv6CidrBlock: true
    
    # Internet Gateway y EgressOnlyInternetGateway

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-igw'

    VPCGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: !Ref VPC
            InternetGatewayId: !Ref InternetGateway

    # Puerta de enlace de internet solo de salida para IPv6 EIgw    
    #EgressOnlyInternetGateway:
    #    Type: AWS::EC2::EgressOnlyInternetGateway
    #    Properties: 
    #      VpcId: !Ref VPC

    # Tabla de rutas publica

    TablaRutasPublica:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-rtb-public'
    

  # Private Routes Tables
    TablaRutasPrivada1:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: "Name"
                  Value: !Sub '${NombreProyecto}${NN}-rtb-private1'

    TablaRutasPrivada2:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: "Name"
                  Value: !Sub '${NombreProyecto}${NN}-rtb-private2'


    # Rutas por defecto para la tabla de rutas publica. Tanto IPv4 como IPv6

    DefaultRouteIPv4:
        Type: AWS::EC2::Route
        DependsOn: VPCGatewayAttachment
        Properties:
            RouteTableId: !Ref TablaRutasPublica
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
    
    DefaultRouteIPv6:
        Type: AWS::EC2::Route
        DependsOn: VPCGatewayAttachment
        Properties:
            RouteTableId: !Ref TablaRutasPublica
            DestinationIpv6CidrBlock: ::/0
            GatewayId: !Ref InternetGateway
    
    # SubRedes publicas
    
    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: !Sub '10.24.1${NN}.0/25'
            Ipv6CidrBlock:  !Select [1, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
            #Ipv6CidrBlock: !GetAtt 'VPC.Ipv6CidrBlocks.0'
            AssignIpv6AddressOnCreation: true
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-PublicSubnet1'

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: !Sub '10.24.1${NN}.128/25'
            Ipv6CidrBlock:  !Select [2, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
            AssignIpv6AddressOnCreation: true
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-PublicSubnet2'

    # Asociacion de subredes publicas con tabla de rutas

    SubnetRouteTableAssociation1:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSubnet1
            RouteTableId: !Ref TablaRutasPublica

    SubnetRouteTableAssociation2:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSubnet2
            RouteTableId: !Ref TablaRutasPublica

    # SubRedes privadas

    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: !Sub '10.24.2${NN}.0/25'
            Ipv6CidrBlock:  !Select [3, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
            AssignIpv6AddressOnCreation: true
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-PrivateSubnet1'

    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: !Sub '10.24.2${NN}.128/25'
            Ipv6CidrBlock:  !Select [4, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
            AssignIpv6AddressOnCreation: true
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-PrivateSubnet2'

    # Asociacion de subredes privadas con tabla de rutas

    SubnetRouteTableAssociation3:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PrivateSubnet1
            RouteTableId: !Ref TablaRutasPrivada1

    SubnetRouteTableAssociation4:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PrivateSubnet2
            RouteTableId: !Ref TablaRutasPrivada2

    # Grupo de seguridad Ubuntu. Puertos DNS, HTTP, HTTPS y SSH
    UbuntuSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: !Sub '${NombreProyecto}${NN}-us-sg'
            GroupDescription: !Sub '${NombreProyecto}${NN}-us-sg'
            VpcId: !Ref VPC
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 53
                ToPort: 53
                CidrIp: 0.0.0.0/0
                Description: Allow DNS(TCP) IPv4
              - IpProtocol: udp
                FromPort: 53
                ToPort: 53
                CidrIp: 0.0.0.0/0
                Description: Allow DNS(UDP) IPv4
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
                Description: Allow HTTP IPv4       
              - IpProtocol: tcp
                FromPort: 443
                ToPort: 443
                CidrIp: 0.0.0.0/0
                Description: Allow HTTPS IPv4           
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 0.0.0.0/0
                Description: Allow SSH IPv4
              - IpProtocol: tcp
                FromPort: 53
                ToPort: 53
                CidrIpv6: ::/0
                Description: Allow DNS(TCP) IPv6
              - IpProtocol: udp
                FromPort: 53
                ToPort: 53
                CidrIpv6: ::/0
                Description: Allow DNS(UDP) IPv6
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIpv6: ::/0
                Description: Allow HTTP IPv6           
              - IpProtocol: tcp
                FromPort: 443
                ToPort: 443
                CidrIpv6: ::/0
                Description: Allow HTTPS IPv6            
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIpv6: ::/0
                Description: Allow SSH IPv6
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-us-sg'
    
    # Creacion de instancia Ubuntu

    UbuntuInstance:
        Type: AWS::EC2::Instance
        Properties:
          ImageId: !Ref AMIUbuntu
          InstanceType: t2.micro
          KeyName: vockey
          Monitoring: false
          SecurityGroupIds:
              - !Ref UbuntuSecurityGroup
          SubnetId: !Ref PublicSubnet1
          PrivateIpAddress: !Sub '10.24.1${NN}.100'
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              echo 'User data para Ubuntu Server'
              apt-get update -y
              apt-get upgrade -y
              apt-get install apache2 -y
          Tags:
            - Key: Name
              Value: !Sub '${NombreProyecto}${NN}-us'
          BlockDeviceMappings:
            - DeviceName: /dev/sda1  # El volumen raíz de la instancia
              Ebs:
                VolumeSize: 20  # Tamaño del volumen en GB
                VolumeType: gp3  # Tipo de volumen
                DeleteOnTermination: true  # El volumen se eliminará cuando la instancia termine
    UbuntuElasticIp:
        Type: AWS::EC2::EIP
        Properties:
            InstanceId: !Ref UbuntuInstance
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-us-ip'

    # Grupo de seguridad windows
    WindowsSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: !Sub '${NombreProyecto}${NN}-ws-sg'
            GroupDescription: !Sub '${NombreProyecto}${NN}-ws-sg'
            VpcId: !Ref VPC
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 3389
                ToPort: 3389
                CidrIp: 0.0.0.0/0
                Description: Allow RDP IPv4
              - IpProtocol: tcp
                FromPort: 53
                ToPort: 53
                CidrIp: 0.0.0.0/0
                Description: Allow DNS(TCP) IPv4
              - IpProtocol: udp
                FromPort: 53
                ToPort: 53
                CidrIp: 0.0.0.0/0
                Description: Allow DNS(UDP) IPv4
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
                Description: Allow HTTP IPv4
              - IpProtocol: tcp
                FromPort: 3389
                ToPort: 3389
                CidrIpv6: ::/0
                Description: Allow RDP IPv6
              - IpProtocol: tcp
                FromPort: 53
                ToPort: 53
                CidrIpv6: ::/0
                Description: Allow DNS(TCP) IPv6
              - IpProtocol: udp
                FromPort: 53
                ToPort: 53
                CidrIpv6: ::/0
                Description: Allow DNS(UDP) IPv6
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIpv6: ::/0
                Description: Allow HTTP IPv6
              - IpProtocol: '-1'
                SourceSecurityGroupId: !Ref UbuntuSecurityGroup
                Description: Permitir tráfico desde el grupo de seguridad de Ubuntu
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-ws-sg'
    # Creacion de instancia Windows
    WindowsInstance:
        Type: AWS::EC2::Instance
        Properties:
            ImageId: !Ref AMIWindows
            InstanceType: t2.medium
            KeyName: vockey
            Monitoring: false
            SecurityGroupIds:
                - !Ref WindowsSecurityGroup
            SubnetId: !Ref PublicSubnet2
            PrivateIpAddress: !Sub '10.24.1${NN}.200'
            UserData: # Instala IIS
              Fn::Base64: !Sub |
                <powershell>
                Write-Host 'User data para Windows Server'
                Install-WindowsFeature -name Web-Server -IncludeManagementTools  
                </powershell>                
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-ws'
    WindowsElasticIp:
        Type: AWS::EC2::EIP
        Properties:
            InstanceId: !Ref WindowsInstance
            Tags:
                - Key: Name
                  Value: !Sub '${NombreProyecto}${NN}-ws-ip'
Outputs:
    Proyecto:
        Description: Nombre del proyecto
        Value: !Sub '${NombreProyecto}${NN}'
        Export:
            Name:  "Proyecto"
    UbuntuInstance:
        Description: Ubuntu Instance Public IP
        Value: !GetAtt UbuntuInstance.PublicIp
    WindowsInstance:
        Description: Windows Instance Public IP
        Value: !GetAtt WindowsInstance.PublicIp
    VPCId:
        Description: "VPC ID"
        Value: !Ref VPC
        Export:
            Name: "MiVPCID"  # Exporta el ID de la VPC. Utilizo el export para poder importar el ID de la VPC en otro stack
                             # En la plantilla destino utilizar --->   VpcId: !ImportValue MiVPCID
    PublicSubnet1Id:
        Description: "Public Subnet 1 ID"
        Value: !Ref PublicSubnet1

    PublicSubnet2Id:
        Description: "Public Subnet 2 ID"
        Value: !Ref PublicSubnet2

    PrivateSubnet1Id:
        Description: "Private Subnet 1 ID"
        Value: !Ref PrivateSubnet1
        Export:
            Name: "MiPrivateSubnet1ID"  # Exporta el ID de la Subnet 1

    PrivateSubnet2Id:
        Description: "Private Subnet 2 ID"
        Value: !Ref PrivateSubnet2
        Export:
            Name: "MiPrivateSubnet2ID"  # Exporta el ID de la Subnet 2